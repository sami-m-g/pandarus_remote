[build-system]
requires = ["setuptools>=68.0"]
build-backend = "setuptools.build_meta"

[project]
name = "pandarus_remote"
authors = [
  { name="Mina Sami", email="sami.mg@outlook.com" }
]
maintainers = [
  { name="Mina Sami", email="sami.mg@outlook.com" }
]
description = "Flask app for Pandarus."
readme = "README.md"
dynamic = ["version"]
# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Natural Language :: English",
    "Operating System :: OS Independent",
]
requires-python = ">=3.9"
dependencies = [
    "appdirs",
    "fiona",
    "flask",
    "pandarus==2.0.1.dev0",
    "peewee",
    "redis",
    "rq",
]

[project.urls]
source = "https://github.com/sami-m-g/pandarus_remote"
homepage = "https://github.com/sami-m-g/pandarus_remote"
tracker = "https://github.com/sami-m-g/pandarus_remote/issues"

[project.optional-dependencies]
# Getting recursive dependencies to work is a pain, this
# seems to work, at least for now
testing = [
    "fakeredis",
    "flask-testing",
    "pandarus_remote",
    "pytest",
    "pytest-cov",
    "python-coveralls",
]
dev = [
    "build",
    "fakeredis",
    "flask-testing",
    "pre-commit",
    "pylint",
    "pytest",
    "pytest-cov",
    "setuptools",
    "sphinx",
    "sphinx-rtd-theme",
]

[tool.setuptools]
license-files = ["LICENSE"]
include-package-data = true
packages = ["pandarus_remote"]

[tool.setuptools.dynamic]
version = {attr = "pandarus_remote.version.__version__"}

[tool.pytest.ini_options]
addopts = "--cov pandarus_remote --cov-report term-missing --verbose"
redis_port = 6379
norecursedirs = [
    "dist",
    "build",
    ".tox"
]
testpaths = ["tests/unit/*.py", "tests/integration/*.py"]

[tool.flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = ["E203", "W503"]
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude = [
    ".tox",
    "build",
    "dist",
    ".eggs",
    "docs/conf.py",
]

[tool.black]
line-length = 88

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pylint.MAIN]
extension-pkg-allow-list=["fiona"]

[tool.pylint.DESIGN]
max-args = 12
max-locals = 24
max-returns = 7
max-statements = 50

[tool.pylint.FORMAT]
max-line-length = 100
max-module-lines = 1000
